from flask import Flask, request, jsonify
import requests
import io, os
from PIL import Image


app = Flask(__name__)

# Define the model URLs
MODELS = {
    "flux-dev": "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-dev",
    "flux-schnell": "https://api-inference.huggingface.co/models/black-forest-labs/FLUX.1-schnell",
    "flux-Realism":  "https://api-inference.huggingface.co/models/XLabs-AI/flux-RealismLora"
}

headers = {"Authorization": f"Bearer {os.getenv('HUGGING_FACE_API_KEY')}"}

def query(model, payload):
    print(f"Sending request to model: {model} with payload: {payload}")
    response = requests.post(MODELS[model], headers=headers, json=payload)
    
    # Check if the response is an image
    if response.headers['Content-Type'].startswith('image'):
        print("Image successfully generated by the model.")
        return response.content
    else:
        print("Error: API did not return an image.")
        print("Response Text:", response.text)
        return None

@app.route('/generate-image', methods=['POST'])
def generate_image():
    data = request.json
    model = data.get('model')
    inputs = data.get('inputs')
    
    # New parameters with default values
    height = data.get('height', 1024)
    width = data.get('width', 1024)
    guidance_scale = data.get('guidance_scale', 0.0)
    num_inference_steps = data.get('num_inference_steps', 4)
    max_sequence_length = data.get('max_sequence_length', 256)
    seed = data.get('seed', 0)
    
    # Print the received data
    print(f"Received request with model: {model}, inputs: {inputs}")
    print(f"Parameters: height={height}, width={width}, guidance_scale={guidance_scale}, steps={num_inference_steps}, "
          f"max_length={max_sequence_length}, seed={seed}")
    
    # Check required fields
    if not model or not inputs:
        print("Missing required fields in the request.")
        return jsonify({"error": "Model and inputs are required"}), 400
    
    # Check if the model is valid
    if model not in MODELS:
        print("Invalid model selected.")
        return jsonify({"error": "Invalid model selected"}), 400
    
    # Generate the image with parameters
    payload = {
        "inputs": inputs,
        "parameters": {
            "height": height,
            "width": width,
            "guidance_scale": guidance_scale,
            "num_inference_steps": num_inference_steps,
            "max_sequence_length": max_sequence_length,
            "seed": seed
        }
    }
    
    image_bytes = query(model, payload)
    
    if image_bytes:
        # Only proceed if an image was returned
        image = Image.open(io.BytesIO(image_bytes))
        image.save("antibiotics3.png")
        return jsonify({"message": "Image generated and saved successfully"}), 200
    else:
        # Handle the case where no image was returned
        print("No image to save.")
        return jsonify({"error": "Failed to generate image"}), 500

if __name__ == '__main__':
    app.run(debug=True)
